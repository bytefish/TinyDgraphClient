// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Proto/api.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;

namespace TinyDgraphClient.Generated {

  /// <summary>Holder for reflection information generated from Proto/api.proto</summary>
  public static partial class ApiReflection {

    #region Descriptor
    /// <summary>File descriptor for Proto/api.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ApiReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9Qcm90by9hcGkucHJvdG8SA2FwaSLFAQoHUmVxdWVzdBINCgVxdWVyeRgB",
            "IAEoCRIkCgR2YXJzGAIgAygLMhYuYXBpLlJlcXVlc3QuVmFyc0VudHJ5EhAK",
            "CHN0YXJ0X3RzGA0gASgEEh4KCGxpbl9yZWFkGA4gASgLMgwuYXBpLkxpblJl",
            "YWQSEQoJcmVhZF9vbmx5GA8gASgIEhMKC2Jlc3RfZWZmb3J0GBAgASgIGisK",
            "CVZhcnNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBInoK",
            "CFJlc3BvbnNlEgwKBGpzb24YASABKAwSIwoGc2NoZW1hGAIgAygLMg8uYXBp",
            "LlNjaGVtYU5vZGVCAhgBEhwKA3R4bhgDIAEoCzIPLmFwaS5UeG5Db250ZXh0",
            "Eh0KB2xhdGVuY3kYDCABKAsyDC5hcGkuTGF0ZW5jeSKfAQoIQXNzaWduZWQS",
            "JQoEdWlkcxgBIAMoCzIXLmFwaS5Bc3NpZ25lZC5VaWRzRW50cnkSIAoHY29u",
            "dGV4dBgCIAEoCzIPLmFwaS5UeG5Db250ZXh0Eh0KB2xhdGVuY3kYDCABKAsy",
            "DC5hcGkuTGF0ZW5jeRorCglVaWRzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZh",
            "bHVlGAIgASgJOgI4ASLtAQoITXV0YXRpb24SEAoIc2V0X2pzb24YASABKAwS",
            "EwoLZGVsZXRlX2pzb24YAiABKAwSEgoKc2V0X25xdWFkcxgDIAEoDBISCgpk",
            "ZWxfbnF1YWRzGAQgASgMEg0KBXF1ZXJ5GAUgASgJEgwKBGNvbmQYBiABKAkS",
            "FwoDc2V0GAogAygLMgouYXBpLk5RdWFkEhcKA2RlbBgLIAMoCzIKLmFwaS5O",
            "UXVhZBIQCghzdGFydF90cxgNIAEoBBISCgpjb21taXRfbm93GA4gASgIEh0K",
            "FWlnbm9yZV9pbmRleF9jb25mbGljdBgPIAEoCCK3AQoJT3BlcmF0aW9uEg4K",
            "BnNjaGVtYRgBIAEoCRIRCglkcm9wX2F0dHIYAiABKAkSEAoIZHJvcF9hbGwY",
            "AyABKAgSJgoHZHJvcF9vcBgEIAEoDjIVLmFwaS5PcGVyYXRpb24uRHJvcE9w",
            "EhIKCmRyb3BfdmFsdWUYBSABKAkiOQoGRHJvcE9wEggKBE5PTkUQABIHCgNB",
            "TEwQARIICgREQVRBEAISCAoEQVRUUhADEggKBFRZUEUQBCIXCgdQYXlsb2Fk",
            "EgwKBERhdGEYASABKAwifwoKVHhuQ29udGV4dBIQCghzdGFydF90cxgBIAEo",
            "BBIRCgljb21taXRfdHMYAiABKAQSDwoHYWJvcnRlZBgDIAEoCBIMCgRrZXlz",
            "GAQgAygJEg0KBXByZWRzGAUgAygJEh4KCGxpbl9yZWFkGA0gASgLMgwuYXBp",
            "LkxpblJlYWQiBwoFQ2hlY2siFgoHVmVyc2lvbhILCgN0YWcYASABKAkitgEK",
            "B0xpblJlYWQSIgoDaWRzGAEgAygLMhUuYXBpLkxpblJlYWQuSWRzRW50cnkS",
            "KwoKc2VxdWVuY2luZxgCIAEoDjIXLmFwaS5MaW5SZWFkLlNlcXVlbmNpbmca",
            "KgoISWRzRW50cnkSCwoDa2V5GAEgASgNEg0KBXZhbHVlGAIgASgEOgI4ASIu",
            "CgpTZXF1ZW5jaW5nEg8KC0NMSUVOVF9TSURFEAASDwoLU0VSVkVSX1NJREUQ",
            "ASJmCgdMYXRlbmN5EhIKCnBhcnNpbmdfbnMYASABKAQSFQoNcHJvY2Vzc2lu",
            "Z19ucxgCIAEoBBITCgtlbmNvZGluZ19ucxgDIAEoBBIbChNhc3NpZ25fdGlt",
            "ZXN0YW1wX25zGAQgASgEIpkBCgVOUXVhZBIPCgdzdWJqZWN0GAEgASgJEhEK",
            "CXByZWRpY2F0ZRgCIAEoCRIRCglvYmplY3RfaWQYAyABKAkSIAoMb2JqZWN0",
            "X3ZhbHVlGAQgASgLMgouYXBpLlZhbHVlEg0KBWxhYmVsGAUgASgJEgwKBGxh",
            "bmcYBiABKAkSGgoGZmFjZXRzGAcgAygLMgouYXBpLkZhY2V0IvQBCgVWYWx1",
            "ZRIVCgtkZWZhdWx0X3ZhbBgBIAEoCUgAEhMKCWJ5dGVzX3ZhbBgCIAEoDEgA",
            "EhEKB2ludF92YWwYAyABKANIABISCghib29sX3ZhbBgEIAEoCEgAEhEKB3N0",
            "cl92YWwYBSABKAlIABIUCgpkb3VibGVfdmFsGAYgASgBSAASEQoHZ2VvX3Zh",
            "bBgHIAEoDEgAEhIKCGRhdGVfdmFsGAggASgMSAASFgoMZGF0ZXRpbWVfdmFs",
            "GAkgASgMSAASFgoMcGFzc3dvcmRfdmFsGAogASgJSAASEQoHdWlkX3ZhbBgL",
            "IAEoBEgAQgUKA3ZhbCKrAQoFRmFjZXQSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgMEiQKCHZhbF90eXBlGAMgASgOMhIuYXBpLkZhY2V0LlZhbFR5cGUS",
            "DgoGdG9rZW5zGAQgAygJEg0KBWFsaWFzGAUgASgJIkEKB1ZhbFR5cGUSCgoG",
            "U1RSSU5HEAASBwoDSU5UEAESCQoFRkxPQVQQAhIICgRCT09MEAMSDAoIREFU",
            "RVRJTUUQBCKbAQoKU2NoZW1hTm9kZRIRCglwcmVkaWNhdGUYASABKAkSDAoE",
            "dHlwZRgCIAEoCRINCgVpbmRleBgDIAEoCBIRCgl0b2tlbml6ZXIYBCADKAkS",
            "DwoHcmV2ZXJzZRgFIAEoCBINCgVjb3VudBgGIAEoCBIMCgRsaXN0GAcgASgI",
            "Eg4KBnVwc2VydBgIIAEoCBIMCgRsYW5nGAkgASgIIkcKDExvZ2luUmVxdWVz",
            "dBIOCgZ1c2VyaWQYASABKAkSEAoIcGFzc3dvcmQYAiABKAkSFQoNcmVmcmVz",
            "aF90b2tlbhgDIAEoCSIuCgNKd3QSEgoKYWNjZXNzX2p3dBgBIAEoCRITCgty",
            "ZWZyZXNoX2p3dBgCIAEoCTKRAgoGRGdyYXBoEisKBUxvZ2luEhEuYXBpLkxv",
            "Z2luUmVxdWVzdBoNLmFwaS5SZXNwb25zZSIAEiYKBVF1ZXJ5EgwuYXBpLlJl",
            "cXVlc3QaDS5hcGkuUmVzcG9uc2UiABIoCgZNdXRhdGUSDS5hcGkuTXV0YXRp",
            "b24aDS5hcGkuQXNzaWduZWQiABInCgVBbHRlchIOLmFwaS5PcGVyYXRpb24a",
            "DC5hcGkuUGF5bG9hZCIAEjMKDUNvbW1pdE9yQWJvcnQSDy5hcGkuVHhuQ29u",
            "dGV4dBoPLmFwaS5UeG5Db250ZXh0IgASKgoMQ2hlY2tWZXJzaW9uEgouYXBp",
            "LkNoZWNrGgwuYXBpLlZlcnNpb24iAEIYCglpby5kZ3JhcGhCC0RncmFwaFBy",
            "b3RvYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Request), TinyDgraphClient.Generated.Request.Parser, new[]{ "Query", "Vars", "StartTs", "LinRead", "ReadOnly", "BestEffort" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Response), TinyDgraphClient.Generated.Response.Parser, new[]{ "Json", "Schema", "Txn", "Latency" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Assigned), TinyDgraphClient.Generated.Assigned.Parser, new[]{ "Uids", "Context", "Latency" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Mutation), TinyDgraphClient.Generated.Mutation.Parser, new[]{ "SetJson", "DeleteJson", "SetNquads", "DelNquads", "Query", "Cond", "Set", "Del", "StartTs", "CommitNow", "IgnoreIndexConflict" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Operation), TinyDgraphClient.Generated.Operation.Parser, new[]{ "Schema", "DropAttr", "DropAll", "DropOp", "DropValue" }, null, new[]{ typeof(TinyDgraphClient.Generated.Operation.Types.DropOp) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Payload), TinyDgraphClient.Generated.Payload.Parser, new[]{ "Data" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.TxnContext), TinyDgraphClient.Generated.TxnContext.Parser, new[]{ "StartTs", "CommitTs", "Aborted", "Keys", "Preds", "LinRead" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Check), TinyDgraphClient.Generated.Check.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Version), TinyDgraphClient.Generated.Version.Parser, new[]{ "Tag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.LinRead), TinyDgraphClient.Generated.LinRead.Parser, new[]{ "Ids", "Sequencing" }, null, new[]{ typeof(TinyDgraphClient.Generated.LinRead.Types.Sequencing) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Latency), TinyDgraphClient.Generated.Latency.Parser, new[]{ "ParsingNs", "ProcessingNs", "EncodingNs", "AssignTimestampNs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.NQuad), TinyDgraphClient.Generated.NQuad.Parser, new[]{ "Subject", "Predicate", "ObjectId", "ObjectValue", "Label", "Lang", "Facets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Value), TinyDgraphClient.Generated.Value.Parser, new[]{ "DefaultVal", "BytesVal", "IntVal", "BoolVal", "StrVal", "DoubleVal", "GeoVal", "DateVal", "DatetimeVal", "PasswordVal", "UidVal" }, new[]{ "Val" }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Facet), TinyDgraphClient.Generated.Facet.Parser, new[]{ "Key", "Value", "ValType", "Tokens", "Alias" }, null, new[]{ typeof(TinyDgraphClient.Generated.Facet.Types.ValType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.SchemaNode), TinyDgraphClient.Generated.SchemaNode.Parser, new[]{ "Predicate", "Type", "Index", "Tokenizer", "Reverse", "Count", "List", "Upsert", "Lang" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.LoginRequest), TinyDgraphClient.Generated.LoginRequest.Parser, new[]{ "Userid", "Password", "RefreshToken" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(TinyDgraphClient.Generated.Jwt), TinyDgraphClient.Generated.Jwt.Parser, new[]{ "AccessJwt", "RefreshJwt" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request(Request other) : this() {
      query_ = other.query_;
      vars_ = other.vars_.Clone();
      startTs_ = other.startTs_;
      linRead_ = other.linRead_ != null ? other.linRead_.Clone() : null;
      readOnly_ = other.readOnly_;
      bestEffort_ = other.bestEffort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Request Clone() {
      return new Request(this);
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 1;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_vars_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 18);
    private readonly pbc::MapField<string, string> vars_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Support for GraphQL like variables.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Vars {
      get { return vars_; }
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 13;
    private ulong startTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTs {
      get { return startTs_; }
      set {
        startTs_ = value;
      }
    }

    /// <summary>Field number for the "lin_read" field.</summary>
    public const int LinReadFieldNumber = 14;
    private TinyDgraphClient.Generated.LinRead linRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.LinRead LinRead {
      get { return linRead_; }
      set {
        linRead_ = value;
      }
    }

    /// <summary>Field number for the "read_only" field.</summary>
    public const int ReadOnlyFieldNumber = 15;
    private bool readOnly_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ReadOnly {
      get { return readOnly_; }
      set {
        readOnly_ = value;
      }
    }

    /// <summary>Field number for the "best_effort" field.</summary>
    public const int BestEffortFieldNumber = 16;
    private bool bestEffort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BestEffort {
      get { return bestEffort_; }
      set {
        bestEffort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Query != other.Query) return false;
      if (!Vars.Equals(other.Vars)) return false;
      if (StartTs != other.StartTs) return false;
      if (!object.Equals(LinRead, other.LinRead)) return false;
      if (ReadOnly != other.ReadOnly) return false;
      if (BestEffort != other.BestEffort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      hash ^= Vars.GetHashCode();
      if (StartTs != 0UL) hash ^= StartTs.GetHashCode();
      if (linRead_ != null) hash ^= LinRead.GetHashCode();
      if (ReadOnly != false) hash ^= ReadOnly.GetHashCode();
      if (BestEffort != false) hash ^= BestEffort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Query.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Query);
      }
      vars_.WriteTo(output, _map_vars_codec);
      if (StartTs != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(StartTs);
      }
      if (linRead_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(LinRead);
      }
      if (ReadOnly != false) {
        output.WriteRawTag(120);
        output.WriteBool(ReadOnly);
      }
      if (BestEffort != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(BestEffort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      size += vars_.CalculateSize(_map_vars_codec);
      if (StartTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTs);
      }
      if (linRead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinRead);
      }
      if (ReadOnly != false) {
        size += 1 + 1;
      }
      if (BestEffort != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      vars_.Add(other.vars_);
      if (other.StartTs != 0UL) {
        StartTs = other.StartTs;
      }
      if (other.linRead_ != null) {
        if (linRead_ == null) {
          LinRead = new TinyDgraphClient.Generated.LinRead();
        }
        LinRead.MergeFrom(other.LinRead);
      }
      if (other.ReadOnly != false) {
        ReadOnly = other.ReadOnly;
      }
      if (other.BestEffort != false) {
        BestEffort = other.BestEffort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Query = input.ReadString();
            break;
          }
          case 18: {
            vars_.AddEntriesFrom(input, _map_vars_codec);
            break;
          }
          case 104: {
            StartTs = input.ReadUInt64();
            break;
          }
          case 114: {
            if (linRead_ == null) {
              LinRead = new TinyDgraphClient.Generated.LinRead();
            }
            input.ReadMessage(LinRead);
            break;
          }
          case 120: {
            ReadOnly = input.ReadBool();
            break;
          }
          case 128: {
            BestEffort = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response(Response other) : this() {
      json_ = other.json_;
      schema_ = other.schema_.Clone();
      txn_ = other.txn_ != null ? other.txn_.Clone() : null;
      latency_ = other.latency_ != null ? other.latency_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Response Clone() {
      return new Response(this);
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 1;
    private pb::ByteString json_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 2;
    private static readonly pb::FieldCodec<TinyDgraphClient.Generated.SchemaNode> _repeated_schema_codec
        = pb::FieldCodec.ForMessage(18, TinyDgraphClient.Generated.SchemaNode.Parser);
    private readonly pbc::RepeatedField<TinyDgraphClient.Generated.SchemaNode> schema_ = new pbc::RepeatedField<TinyDgraphClient.Generated.SchemaNode>();
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<TinyDgraphClient.Generated.SchemaNode> Schema {
      get { return schema_; }
    }

    /// <summary>Field number for the "txn" field.</summary>
    public const int TxnFieldNumber = 3;
    private TinyDgraphClient.Generated.TxnContext txn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.TxnContext Txn {
      get { return txn_; }
      set {
        txn_ = value;
      }
    }

    /// <summary>Field number for the "latency" field.</summary>
    public const int LatencyFieldNumber = 12;
    private TinyDgraphClient.Generated.Latency latency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.Latency Latency {
      get { return latency_; }
      set {
        latency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Json != other.Json) return false;
      if(!schema_.Equals(other.schema_)) return false;
      if (!object.Equals(Txn, other.Txn)) return false;
      if (!object.Equals(Latency, other.Latency)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Json.Length != 0) hash ^= Json.GetHashCode();
      hash ^= schema_.GetHashCode();
      if (txn_ != null) hash ^= Txn.GetHashCode();
      if (latency_ != null) hash ^= Latency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Json);
      }
      schema_.WriteTo(output, _repeated_schema_codec);
      if (txn_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Txn);
      }
      if (latency_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Latency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Json);
      }
      size += schema_.CalculateSize(_repeated_schema_codec);
      if (txn_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Txn);
      }
      if (latency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      if (other.Json.Length != 0) {
        Json = other.Json;
      }
      schema_.Add(other.schema_);
      if (other.txn_ != null) {
        if (txn_ == null) {
          Txn = new TinyDgraphClient.Generated.TxnContext();
        }
        Txn.MergeFrom(other.Txn);
      }
      if (other.latency_ != null) {
        if (latency_ == null) {
          Latency = new TinyDgraphClient.Generated.Latency();
        }
        Latency.MergeFrom(other.Latency);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Json = input.ReadBytes();
            break;
          }
          case 18: {
            schema_.AddEntriesFrom(input, _repeated_schema_codec);
            break;
          }
          case 26: {
            if (txn_ == null) {
              Txn = new TinyDgraphClient.Generated.TxnContext();
            }
            input.ReadMessage(Txn);
            break;
          }
          case 98: {
            if (latency_ == null) {
              Latency = new TinyDgraphClient.Generated.Latency();
            }
            input.ReadMessage(Latency);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Assigned : pb::IMessage<Assigned> {
    private static readonly pb::MessageParser<Assigned> _parser = new pb::MessageParser<Assigned>(() => new Assigned());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Assigned> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assigned() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assigned(Assigned other) : this() {
      uids_ = other.uids_.Clone();
      context_ = other.context_ != null ? other.context_.Clone() : null;
      latency_ = other.latency_ != null ? other.latency_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Assigned Clone() {
      return new Assigned(this);
    }

    /// <summary>Field number for the "uids" field.</summary>
    public const int UidsFieldNumber = 1;
    private static readonly pbc::MapField<string, string>.Codec _map_uids_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 10);
    private readonly pbc::MapField<string, string> uids_ = new pbc::MapField<string, string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Uids {
      get { return uids_; }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private TinyDgraphClient.Generated.TxnContext context_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.TxnContext Context {
      get { return context_; }
      set {
        context_ = value;
      }
    }

    /// <summary>Field number for the "latency" field.</summary>
    public const int LatencyFieldNumber = 12;
    private TinyDgraphClient.Generated.Latency latency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.Latency Latency {
      get { return latency_; }
      set {
        latency_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Assigned);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Assigned other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Uids.Equals(other.Uids)) return false;
      if (!object.Equals(Context, other.Context)) return false;
      if (!object.Equals(Latency, other.Latency)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Uids.GetHashCode();
      if (context_ != null) hash ^= Context.GetHashCode();
      if (latency_ != null) hash ^= Latency.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _map_uids_codec);
      if (context_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Context);
      }
      if (latency_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Latency);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += uids_.CalculateSize(_map_uids_codec);
      if (context_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Context);
      }
      if (latency_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Latency);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Assigned other) {
      if (other == null) {
        return;
      }
      uids_.Add(other.uids_);
      if (other.context_ != null) {
        if (context_ == null) {
          Context = new TinyDgraphClient.Generated.TxnContext();
        }
        Context.MergeFrom(other.Context);
      }
      if (other.latency_ != null) {
        if (latency_ == null) {
          Latency = new TinyDgraphClient.Generated.Latency();
        }
        Latency.MergeFrom(other.Latency);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            uids_.AddEntriesFrom(input, _map_uids_codec);
            break;
          }
          case 18: {
            if (context_ == null) {
              Context = new TinyDgraphClient.Generated.TxnContext();
            }
            input.ReadMessage(Context);
            break;
          }
          case 98: {
            if (latency_ == null) {
              Latency = new TinyDgraphClient.Generated.Latency();
            }
            input.ReadMessage(Latency);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Mutation : pb::IMessage<Mutation> {
    private static readonly pb::MessageParser<Mutation> _parser = new pb::MessageParser<Mutation>(() => new Mutation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Mutation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation(Mutation other) : this() {
      setJson_ = other.setJson_;
      deleteJson_ = other.deleteJson_;
      setNquads_ = other.setNquads_;
      delNquads_ = other.delNquads_;
      query_ = other.query_;
      cond_ = other.cond_;
      set_ = other.set_.Clone();
      del_ = other.del_.Clone();
      startTs_ = other.startTs_;
      commitNow_ = other.commitNow_;
      ignoreIndexConflict_ = other.ignoreIndexConflict_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Mutation Clone() {
      return new Mutation(this);
    }

    /// <summary>Field number for the "set_json" field.</summary>
    public const int SetJsonFieldNumber = 1;
    private pb::ByteString setJson_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SetJson {
      get { return setJson_; }
      set {
        setJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delete_json" field.</summary>
    public const int DeleteJsonFieldNumber = 2;
    private pb::ByteString deleteJson_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DeleteJson {
      get { return deleteJson_; }
      set {
        deleteJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set_nquads" field.</summary>
    public const int SetNquadsFieldNumber = 3;
    private pb::ByteString setNquads_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString SetNquads {
      get { return setNquads_; }
      set {
        setNquads_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "del_nquads" field.</summary>
    public const int DelNquadsFieldNumber = 4;
    private pb::ByteString delNquads_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DelNquads {
      get { return delNquads_; }
      set {
        delNquads_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "query" field.</summary>
    public const int QueryFieldNumber = 5;
    private string query_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Query {
      get { return query_; }
      set {
        query_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cond" field.</summary>
    public const int CondFieldNumber = 6;
    private string cond_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Cond {
      get { return cond_; }
      set {
        cond_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "set" field.</summary>
    public const int SetFieldNumber = 10;
    private static readonly pb::FieldCodec<TinyDgraphClient.Generated.NQuad> _repeated_set_codec
        = pb::FieldCodec.ForMessage(82, TinyDgraphClient.Generated.NQuad.Parser);
    private readonly pbc::RepeatedField<TinyDgraphClient.Generated.NQuad> set_ = new pbc::RepeatedField<TinyDgraphClient.Generated.NQuad>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<TinyDgraphClient.Generated.NQuad> Set {
      get { return set_; }
    }

    /// <summary>Field number for the "del" field.</summary>
    public const int DelFieldNumber = 11;
    private static readonly pb::FieldCodec<TinyDgraphClient.Generated.NQuad> _repeated_del_codec
        = pb::FieldCodec.ForMessage(90, TinyDgraphClient.Generated.NQuad.Parser);
    private readonly pbc::RepeatedField<TinyDgraphClient.Generated.NQuad> del_ = new pbc::RepeatedField<TinyDgraphClient.Generated.NQuad>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<TinyDgraphClient.Generated.NQuad> Del {
      get { return del_; }
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 13;
    private ulong startTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTs {
      get { return startTs_; }
      set {
        startTs_ = value;
      }
    }

    /// <summary>Field number for the "commit_now" field.</summary>
    public const int CommitNowFieldNumber = 14;
    private bool commitNow_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CommitNow {
      get { return commitNow_; }
      set {
        commitNow_ = value;
      }
    }

    /// <summary>Field number for the "ignore_index_conflict" field.</summary>
    public const int IgnoreIndexConflictFieldNumber = 15;
    private bool ignoreIndexConflict_;
    /// <summary>
    /// this field is not parsed and used by the server anymore.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IgnoreIndexConflict {
      get { return ignoreIndexConflict_; }
      set {
        ignoreIndexConflict_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Mutation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Mutation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetJson != other.SetJson) return false;
      if (DeleteJson != other.DeleteJson) return false;
      if (SetNquads != other.SetNquads) return false;
      if (DelNquads != other.DelNquads) return false;
      if (Query != other.Query) return false;
      if (Cond != other.Cond) return false;
      if(!set_.Equals(other.set_)) return false;
      if(!del_.Equals(other.del_)) return false;
      if (StartTs != other.StartTs) return false;
      if (CommitNow != other.CommitNow) return false;
      if (IgnoreIndexConflict != other.IgnoreIndexConflict) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SetJson.Length != 0) hash ^= SetJson.GetHashCode();
      if (DeleteJson.Length != 0) hash ^= DeleteJson.GetHashCode();
      if (SetNquads.Length != 0) hash ^= SetNquads.GetHashCode();
      if (DelNquads.Length != 0) hash ^= DelNquads.GetHashCode();
      if (Query.Length != 0) hash ^= Query.GetHashCode();
      if (Cond.Length != 0) hash ^= Cond.GetHashCode();
      hash ^= set_.GetHashCode();
      hash ^= del_.GetHashCode();
      if (StartTs != 0UL) hash ^= StartTs.GetHashCode();
      if (CommitNow != false) hash ^= CommitNow.GetHashCode();
      if (IgnoreIndexConflict != false) hash ^= IgnoreIndexConflict.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SetJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(SetJson);
      }
      if (DeleteJson.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(DeleteJson);
      }
      if (SetNquads.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(SetNquads);
      }
      if (DelNquads.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(DelNquads);
      }
      if (Query.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Query);
      }
      if (Cond.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Cond);
      }
      set_.WriteTo(output, _repeated_set_codec);
      del_.WriteTo(output, _repeated_del_codec);
      if (StartTs != 0UL) {
        output.WriteRawTag(104);
        output.WriteUInt64(StartTs);
      }
      if (CommitNow != false) {
        output.WriteRawTag(112);
        output.WriteBool(CommitNow);
      }
      if (IgnoreIndexConflict != false) {
        output.WriteRawTag(120);
        output.WriteBool(IgnoreIndexConflict);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SetJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SetJson);
      }
      if (DeleteJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DeleteJson);
      }
      if (SetNquads.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(SetNquads);
      }
      if (DelNquads.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DelNquads);
      }
      if (Query.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Query);
      }
      if (Cond.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Cond);
      }
      size += set_.CalculateSize(_repeated_set_codec);
      size += del_.CalculateSize(_repeated_del_codec);
      if (StartTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTs);
      }
      if (CommitNow != false) {
        size += 1 + 1;
      }
      if (IgnoreIndexConflict != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Mutation other) {
      if (other == null) {
        return;
      }
      if (other.SetJson.Length != 0) {
        SetJson = other.SetJson;
      }
      if (other.DeleteJson.Length != 0) {
        DeleteJson = other.DeleteJson;
      }
      if (other.SetNquads.Length != 0) {
        SetNquads = other.SetNquads;
      }
      if (other.DelNquads.Length != 0) {
        DelNquads = other.DelNquads;
      }
      if (other.Query.Length != 0) {
        Query = other.Query;
      }
      if (other.Cond.Length != 0) {
        Cond = other.Cond;
      }
      set_.Add(other.set_);
      del_.Add(other.del_);
      if (other.StartTs != 0UL) {
        StartTs = other.StartTs;
      }
      if (other.CommitNow != false) {
        CommitNow = other.CommitNow;
      }
      if (other.IgnoreIndexConflict != false) {
        IgnoreIndexConflict = other.IgnoreIndexConflict;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SetJson = input.ReadBytes();
            break;
          }
          case 18: {
            DeleteJson = input.ReadBytes();
            break;
          }
          case 26: {
            SetNquads = input.ReadBytes();
            break;
          }
          case 34: {
            DelNquads = input.ReadBytes();
            break;
          }
          case 42: {
            Query = input.ReadString();
            break;
          }
          case 50: {
            Cond = input.ReadString();
            break;
          }
          case 82: {
            set_.AddEntriesFrom(input, _repeated_set_codec);
            break;
          }
          case 90: {
            del_.AddEntriesFrom(input, _repeated_del_codec);
            break;
          }
          case 104: {
            StartTs = input.ReadUInt64();
            break;
          }
          case 112: {
            CommitNow = input.ReadBool();
            break;
          }
          case 120: {
            IgnoreIndexConflict = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Operation : pb::IMessage<Operation> {
    private static readonly pb::MessageParser<Operation> _parser = new pb::MessageParser<Operation>(() => new Operation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Operation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation(Operation other) : this() {
      schema_ = other.schema_;
      dropAttr_ = other.dropAttr_;
      dropAll_ = other.dropAll_;
      dropOp_ = other.dropOp_;
      dropValue_ = other.dropValue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Operation Clone() {
      return new Operation(this);
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 1;
    private string schema_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Schema {
      get { return schema_; }
      set {
        schema_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "drop_attr" field.</summary>
    public const int DropAttrFieldNumber = 2;
    private string dropAttr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropAttr {
      get { return dropAttr_; }
      set {
        dropAttr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "drop_all" field.</summary>
    public const int DropAllFieldNumber = 3;
    private bool dropAll_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DropAll {
      get { return dropAll_; }
      set {
        dropAll_ = value;
      }
    }

    /// <summary>Field number for the "drop_op" field.</summary>
    public const int DropOpFieldNumber = 4;
    private TinyDgraphClient.Generated.Operation.Types.DropOp dropOp_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.Operation.Types.DropOp DropOp {
      get { return dropOp_; }
      set {
        dropOp_ = value;
      }
    }

    /// <summary>Field number for the "drop_value" field.</summary>
    public const int DropValueFieldNumber = 5;
    private string dropValue_ = "";
    /// <summary>
    /// If drop_op is ATTR or TYPE, drop_value holds the name of the predicate or
    /// type to delete.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DropValue {
      get { return dropValue_; }
      set {
        dropValue_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Operation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Operation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Schema != other.Schema) return false;
      if (DropAttr != other.DropAttr) return false;
      if (DropAll != other.DropAll) return false;
      if (DropOp != other.DropOp) return false;
      if (DropValue != other.DropValue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Schema.Length != 0) hash ^= Schema.GetHashCode();
      if (DropAttr.Length != 0) hash ^= DropAttr.GetHashCode();
      if (DropAll != false) hash ^= DropAll.GetHashCode();
      if (DropOp != 0) hash ^= DropOp.GetHashCode();
      if (DropValue.Length != 0) hash ^= DropValue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Schema.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Schema);
      }
      if (DropAttr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(DropAttr);
      }
      if (DropAll != false) {
        output.WriteRawTag(24);
        output.WriteBool(DropAll);
      }
      if (DropOp != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) DropOp);
      }
      if (DropValue.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DropValue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Schema.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Schema);
      }
      if (DropAttr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DropAttr);
      }
      if (DropAll != false) {
        size += 1 + 1;
      }
      if (DropOp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DropOp);
      }
      if (DropValue.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DropValue);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Operation other) {
      if (other == null) {
        return;
      }
      if (other.Schema.Length != 0) {
        Schema = other.Schema;
      }
      if (other.DropAttr.Length != 0) {
        DropAttr = other.DropAttr;
      }
      if (other.DropAll != false) {
        DropAll = other.DropAll;
      }
      if (other.DropOp != 0) {
        DropOp = other.DropOp;
      }
      if (other.DropValue.Length != 0) {
        DropValue = other.DropValue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Schema = input.ReadString();
            break;
          }
          case 18: {
            DropAttr = input.ReadString();
            break;
          }
          case 24: {
            DropAll = input.ReadBool();
            break;
          }
          case 32: {
            DropOp = (TinyDgraphClient.Generated.Operation.Types.DropOp) input.ReadEnum();
            break;
          }
          case 42: {
            DropValue = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Operation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DropOp {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("ALL")] All = 1,
        [pbr::OriginalName("DATA")] Data = 2,
        [pbr::OriginalName("ATTR")] Attr = 3,
        [pbr::OriginalName("TYPE")] Type = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Worker services.
  /// </summary>
  public sealed partial class Payload : pb::IMessage<Payload> {
    private static readonly pb::MessageParser<Payload> _parser = new pb::MessageParser<Payload>(() => new Payload());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Payload> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload(Payload other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Payload Clone() {
      return new Payload(this);
    }

    /// <summary>Field number for the "Data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Payload);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Payload other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Payload other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TxnContext : pb::IMessage<TxnContext> {
    private static readonly pb::MessageParser<TxnContext> _parser = new pb::MessageParser<TxnContext>(() => new TxnContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TxnContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnContext(TxnContext other) : this() {
      startTs_ = other.startTs_;
      commitTs_ = other.commitTs_;
      aborted_ = other.aborted_;
      keys_ = other.keys_.Clone();
      preds_ = other.preds_.Clone();
      linRead_ = other.linRead_ != null ? other.linRead_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TxnContext Clone() {
      return new TxnContext(this);
    }

    /// <summary>Field number for the "start_ts" field.</summary>
    public const int StartTsFieldNumber = 1;
    private ulong startTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong StartTs {
      get { return startTs_; }
      set {
        startTs_ = value;
      }
    }

    /// <summary>Field number for the "commit_ts" field.</summary>
    public const int CommitTsFieldNumber = 2;
    private ulong commitTs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CommitTs {
      get { return commitTs_; }
      set {
        commitTs_ = value;
      }
    }

    /// <summary>Field number for the "aborted" field.</summary>
    public const int AbortedFieldNumber = 3;
    private bool aborted_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Aborted {
      get { return aborted_; }
      set {
        aborted_ = value;
      }
    }

    /// <summary>Field number for the "keys" field.</summary>
    public const int KeysFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_keys_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> keys_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of keys to be used for conflict detection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keys {
      get { return keys_; }
    }

    /// <summary>Field number for the "preds" field.</summary>
    public const int PredsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_preds_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> preds_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// List of predicates involved in this transaction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Preds {
      get { return preds_; }
    }

    /// <summary>Field number for the "lin_read" field.</summary>
    public const int LinReadFieldNumber = 13;
    private TinyDgraphClient.Generated.LinRead linRead_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.LinRead LinRead {
      get { return linRead_; }
      set {
        linRead_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TxnContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TxnContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StartTs != other.StartTs) return false;
      if (CommitTs != other.CommitTs) return false;
      if (Aborted != other.Aborted) return false;
      if(!keys_.Equals(other.keys_)) return false;
      if(!preds_.Equals(other.preds_)) return false;
      if (!object.Equals(LinRead, other.LinRead)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StartTs != 0UL) hash ^= StartTs.GetHashCode();
      if (CommitTs != 0UL) hash ^= CommitTs.GetHashCode();
      if (Aborted != false) hash ^= Aborted.GetHashCode();
      hash ^= keys_.GetHashCode();
      hash ^= preds_.GetHashCode();
      if (linRead_ != null) hash ^= LinRead.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StartTs != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(StartTs);
      }
      if (CommitTs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(CommitTs);
      }
      if (Aborted != false) {
        output.WriteRawTag(24);
        output.WriteBool(Aborted);
      }
      keys_.WriteTo(output, _repeated_keys_codec);
      preds_.WriteTo(output, _repeated_preds_codec);
      if (linRead_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LinRead);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StartTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTs);
      }
      if (CommitTs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(CommitTs);
      }
      if (Aborted != false) {
        size += 1 + 1;
      }
      size += keys_.CalculateSize(_repeated_keys_codec);
      size += preds_.CalculateSize(_repeated_preds_codec);
      if (linRead_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LinRead);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TxnContext other) {
      if (other == null) {
        return;
      }
      if (other.StartTs != 0UL) {
        StartTs = other.StartTs;
      }
      if (other.CommitTs != 0UL) {
        CommitTs = other.CommitTs;
      }
      if (other.Aborted != false) {
        Aborted = other.Aborted;
      }
      keys_.Add(other.keys_);
      preds_.Add(other.preds_);
      if (other.linRead_ != null) {
        if (linRead_ == null) {
          LinRead = new TinyDgraphClient.Generated.LinRead();
        }
        LinRead.MergeFrom(other.LinRead);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StartTs = input.ReadUInt64();
            break;
          }
          case 16: {
            CommitTs = input.ReadUInt64();
            break;
          }
          case 24: {
            Aborted = input.ReadBool();
            break;
          }
          case 34: {
            keys_.AddEntriesFrom(input, _repeated_keys_codec);
            break;
          }
          case 42: {
            preds_.AddEntriesFrom(input, _repeated_preds_codec);
            break;
          }
          case 106: {
            if (linRead_ == null) {
              LinRead = new TinyDgraphClient.Generated.LinRead();
            }
            input.ReadMessage(LinRead);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Check : pb::IMessage<Check> {
    private static readonly pb::MessageParser<Check> _parser = new pb::MessageParser<Check>(() => new Check());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Check> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Check() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Check(Check other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Check Clone() {
      return new Check(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Check);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Check other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Check other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      tag_ = other.tag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 1;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Tag != other.Tag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Tag.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Tag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Tag = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LinRead : pb::IMessage<LinRead> {
    private static readonly pb::MessageParser<LinRead> _parser = new pb::MessageParser<LinRead>(() => new LinRead());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LinRead> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinRead() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinRead(LinRead other) : this() {
      ids_ = other.ids_.Clone();
      sequencing_ = other.sequencing_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LinRead Clone() {
      return new LinRead(this);
    }

    /// <summary>Field number for the "ids" field.</summary>
    public const int IdsFieldNumber = 1;
    private static readonly pbc::MapField<uint, ulong>.Codec _map_ids_codec
        = new pbc::MapField<uint, ulong>.Codec(pb::FieldCodec.ForUInt32(8), pb::FieldCodec.ForUInt64(16), 10);
    private readonly pbc::MapField<uint, ulong> ids_ = new pbc::MapField<uint, ulong>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<uint, ulong> Ids {
      get { return ids_; }
    }

    /// <summary>Field number for the "sequencing" field.</summary>
    public const int SequencingFieldNumber = 2;
    private TinyDgraphClient.Generated.LinRead.Types.Sequencing sequencing_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.LinRead.Types.Sequencing Sequencing {
      get { return sequencing_; }
      set {
        sequencing_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LinRead);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LinRead other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Ids.Equals(other.Ids)) return false;
      if (Sequencing != other.Sequencing) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Ids.GetHashCode();
      if (Sequencing != 0) hash ^= Sequencing.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      ids_.WriteTo(output, _map_ids_codec);
      if (Sequencing != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Sequencing);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += ids_.CalculateSize(_map_ids_codec);
      if (Sequencing != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sequencing);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LinRead other) {
      if (other == null) {
        return;
      }
      ids_.Add(other.ids_);
      if (other.Sequencing != 0) {
        Sequencing = other.Sequencing;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ids_.AddEntriesFrom(input, _map_ids_codec);
            break;
          }
          case 16: {
            Sequencing = (TinyDgraphClient.Generated.LinRead.Types.Sequencing) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LinRead message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Sequencing {
        [pbr::OriginalName("CLIENT_SIDE")] ClientSide = 0,
        [pbr::OriginalName("SERVER_SIDE")] ServerSide = 1,
      }

    }
    #endregion

  }

  public sealed partial class Latency : pb::IMessage<Latency> {
    private static readonly pb::MessageParser<Latency> _parser = new pb::MessageParser<Latency>(() => new Latency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Latency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency(Latency other) : this() {
      parsingNs_ = other.parsingNs_;
      processingNs_ = other.processingNs_;
      encodingNs_ = other.encodingNs_;
      assignTimestampNs_ = other.assignTimestampNs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency Clone() {
      return new Latency(this);
    }

    /// <summary>Field number for the "parsing_ns" field.</summary>
    public const int ParsingNsFieldNumber = 1;
    private ulong parsingNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ParsingNs {
      get { return parsingNs_; }
      set {
        parsingNs_ = value;
      }
    }

    /// <summary>Field number for the "processing_ns" field.</summary>
    public const int ProcessingNsFieldNumber = 2;
    private ulong processingNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong ProcessingNs {
      get { return processingNs_; }
      set {
        processingNs_ = value;
      }
    }

    /// <summary>Field number for the "encoding_ns" field.</summary>
    public const int EncodingNsFieldNumber = 3;
    private ulong encodingNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong EncodingNs {
      get { return encodingNs_; }
      set {
        encodingNs_ = value;
      }
    }

    /// <summary>Field number for the "assign_timestamp_ns" field.</summary>
    public const int AssignTimestampNsFieldNumber = 4;
    private ulong assignTimestampNs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong AssignTimestampNs {
      get { return assignTimestampNs_; }
      set {
        assignTimestampNs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Latency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Latency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ParsingNs != other.ParsingNs) return false;
      if (ProcessingNs != other.ProcessingNs) return false;
      if (EncodingNs != other.EncodingNs) return false;
      if (AssignTimestampNs != other.AssignTimestampNs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ParsingNs != 0UL) hash ^= ParsingNs.GetHashCode();
      if (ProcessingNs != 0UL) hash ^= ProcessingNs.GetHashCode();
      if (EncodingNs != 0UL) hash ^= EncodingNs.GetHashCode();
      if (AssignTimestampNs != 0UL) hash ^= AssignTimestampNs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ParsingNs != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(ParsingNs);
      }
      if (ProcessingNs != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(ProcessingNs);
      }
      if (EncodingNs != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(EncodingNs);
      }
      if (AssignTimestampNs != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(AssignTimestampNs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ParsingNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ParsingNs);
      }
      if (ProcessingNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ProcessingNs);
      }
      if (EncodingNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(EncodingNs);
      }
      if (AssignTimestampNs != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AssignTimestampNs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Latency other) {
      if (other == null) {
        return;
      }
      if (other.ParsingNs != 0UL) {
        ParsingNs = other.ParsingNs;
      }
      if (other.ProcessingNs != 0UL) {
        ProcessingNs = other.ProcessingNs;
      }
      if (other.EncodingNs != 0UL) {
        EncodingNs = other.EncodingNs;
      }
      if (other.AssignTimestampNs != 0UL) {
        AssignTimestampNs = other.AssignTimestampNs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ParsingNs = input.ReadUInt64();
            break;
          }
          case 16: {
            ProcessingNs = input.ReadUInt64();
            break;
          }
          case 24: {
            EncodingNs = input.ReadUInt64();
            break;
          }
          case 32: {
            AssignTimestampNs = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NQuad : pb::IMessage<NQuad> {
    private static readonly pb::MessageParser<NQuad> _parser = new pb::MessageParser<NQuad>(() => new NQuad());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NQuad> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NQuad() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NQuad(NQuad other) : this() {
      subject_ = other.subject_;
      predicate_ = other.predicate_;
      objectId_ = other.objectId_;
      objectValue_ = other.objectValue_ != null ? other.objectValue_.Clone() : null;
      label_ = other.label_;
      lang_ = other.lang_;
      facets_ = other.facets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NQuad Clone() {
      return new NQuad(this);
    }

    /// <summary>Field number for the "subject" field.</summary>
    public const int SubjectFieldNumber = 1;
    private string subject_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Subject {
      get { return subject_; }
      set {
        subject_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "predicate" field.</summary>
    public const int PredicateFieldNumber = 2;
    private string predicate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Predicate {
      get { return predicate_; }
      set {
        predicate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_id" field.</summary>
    public const int ObjectIdFieldNumber = 3;
    private string objectId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ObjectId {
      get { return objectId_; }
      set {
        objectId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "object_value" field.</summary>
    public const int ObjectValueFieldNumber = 4;
    private TinyDgraphClient.Generated.Value objectValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.Value ObjectValue {
      get { return objectValue_; }
      set {
        objectValue_ = value;
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private string label_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Label {
      get { return label_; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 6;
    private string lang_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lang {
      get { return lang_; }
      set {
        lang_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "facets" field.</summary>
    public const int FacetsFieldNumber = 7;
    private static readonly pb::FieldCodec<TinyDgraphClient.Generated.Facet> _repeated_facets_codec
        = pb::FieldCodec.ForMessage(58, TinyDgraphClient.Generated.Facet.Parser);
    private readonly pbc::RepeatedField<TinyDgraphClient.Generated.Facet> facets_ = new pbc::RepeatedField<TinyDgraphClient.Generated.Facet>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<TinyDgraphClient.Generated.Facet> Facets {
      get { return facets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NQuad);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NQuad other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Subject != other.Subject) return false;
      if (Predicate != other.Predicate) return false;
      if (ObjectId != other.ObjectId) return false;
      if (!object.Equals(ObjectValue, other.ObjectValue)) return false;
      if (Label != other.Label) return false;
      if (Lang != other.Lang) return false;
      if(!facets_.Equals(other.facets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Subject.Length != 0) hash ^= Subject.GetHashCode();
      if (Predicate.Length != 0) hash ^= Predicate.GetHashCode();
      if (ObjectId.Length != 0) hash ^= ObjectId.GetHashCode();
      if (objectValue_ != null) hash ^= ObjectValue.GetHashCode();
      if (Label.Length != 0) hash ^= Label.GetHashCode();
      if (Lang.Length != 0) hash ^= Lang.GetHashCode();
      hash ^= facets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Subject.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Subject);
      }
      if (Predicate.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Predicate);
      }
      if (ObjectId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ObjectId);
      }
      if (objectValue_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ObjectValue);
      }
      if (Label.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Label);
      }
      if (Lang.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Lang);
      }
      facets_.WriteTo(output, _repeated_facets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Subject.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Subject);
      }
      if (Predicate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Predicate);
      }
      if (ObjectId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ObjectId);
      }
      if (objectValue_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ObjectValue);
      }
      if (Label.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (Lang.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lang);
      }
      size += facets_.CalculateSize(_repeated_facets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NQuad other) {
      if (other == null) {
        return;
      }
      if (other.Subject.Length != 0) {
        Subject = other.Subject;
      }
      if (other.Predicate.Length != 0) {
        Predicate = other.Predicate;
      }
      if (other.ObjectId.Length != 0) {
        ObjectId = other.ObjectId;
      }
      if (other.objectValue_ != null) {
        if (objectValue_ == null) {
          ObjectValue = new TinyDgraphClient.Generated.Value();
        }
        ObjectValue.MergeFrom(other.ObjectValue);
      }
      if (other.Label.Length != 0) {
        Label = other.Label;
      }
      if (other.Lang.Length != 0) {
        Lang = other.Lang;
      }
      facets_.Add(other.facets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Subject = input.ReadString();
            break;
          }
          case 18: {
            Predicate = input.ReadString();
            break;
          }
          case 26: {
            ObjectId = input.ReadString();
            break;
          }
          case 34: {
            if (objectValue_ == null) {
              ObjectValue = new TinyDgraphClient.Generated.Value();
            }
            input.ReadMessage(ObjectValue);
            break;
          }
          case 42: {
            Label = input.ReadString();
            break;
          }
          case 50: {
            Lang = input.ReadString();
            break;
          }
          case 58: {
            facets_.AddEntriesFrom(input, _repeated_facets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Value : pb::IMessage<Value> {
    private static readonly pb::MessageParser<Value> _parser = new pb::MessageParser<Value>(() => new Value());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Value> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value(Value other) : this() {
      switch (other.ValCase) {
        case ValOneofCase.DefaultVal:
          DefaultVal = other.DefaultVal;
          break;
        case ValOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case ValOneofCase.IntVal:
          IntVal = other.IntVal;
          break;
        case ValOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case ValOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case ValOneofCase.DoubleVal:
          DoubleVal = other.DoubleVal;
          break;
        case ValOneofCase.GeoVal:
          GeoVal = other.GeoVal;
          break;
        case ValOneofCase.DateVal:
          DateVal = other.DateVal;
          break;
        case ValOneofCase.DatetimeVal:
          DatetimeVal = other.DatetimeVal;
          break;
        case ValOneofCase.PasswordVal:
          PasswordVal = other.PasswordVal;
          break;
        case ValOneofCase.UidVal:
          UidVal = other.UidVal;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Value Clone() {
      return new Value(this);
    }

    /// <summary>Field number for the "default_val" field.</summary>
    public const int DefaultValFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefaultVal {
      get { return valCase_ == ValOneofCase.DefaultVal ? (string) val_ : ""; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.DefaultVal;
      }
    }

    /// <summary>Field number for the "bytes_val" field.</summary>
    public const int BytesValFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString BytesVal {
      get { return valCase_ == ValOneofCase.BytesVal ? (pb::ByteString) val_ : pb::ByteString.Empty; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.BytesVal;
      }
    }

    /// <summary>Field number for the "int_val" field.</summary>
    public const int IntValFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long IntVal {
      get { return valCase_ == ValOneofCase.IntVal ? (long) val_ : 0L; }
      set {
        val_ = value;
        valCase_ = ValOneofCase.IntVal;
      }
    }

    /// <summary>Field number for the "bool_val" field.</summary>
    public const int BoolValFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BoolVal {
      get { return valCase_ == ValOneofCase.BoolVal ? (bool) val_ : false; }
      set {
        val_ = value;
        valCase_ = ValOneofCase.BoolVal;
      }
    }

    /// <summary>Field number for the "str_val" field.</summary>
    public const int StrValFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StrVal {
      get { return valCase_ == ValOneofCase.StrVal ? (string) val_ : ""; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.StrVal;
      }
    }

    /// <summary>Field number for the "double_val" field.</summary>
    public const int DoubleValFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double DoubleVal {
      get { return valCase_ == ValOneofCase.DoubleVal ? (double) val_ : 0D; }
      set {
        val_ = value;
        valCase_ = ValOneofCase.DoubleVal;
      }
    }

    /// <summary>Field number for the "geo_val" field.</summary>
    public const int GeoValFieldNumber = 7;
    /// <summary>
    /// Geo data in WKB format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString GeoVal {
      get { return valCase_ == ValOneofCase.GeoVal ? (pb::ByteString) val_ : pb::ByteString.Empty; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.GeoVal;
      }
    }

    /// <summary>Field number for the "date_val" field.</summary>
    public const int DateValFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DateVal {
      get { return valCase_ == ValOneofCase.DateVal ? (pb::ByteString) val_ : pb::ByteString.Empty; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.DateVal;
      }
    }

    /// <summary>Field number for the "datetime_val" field.</summary>
    public const int DatetimeValFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DatetimeVal {
      get { return valCase_ == ValOneofCase.DatetimeVal ? (pb::ByteString) val_ : pb::ByteString.Empty; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.DatetimeVal;
      }
    }

    /// <summary>Field number for the "password_val" field.</summary>
    public const int PasswordValFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PasswordVal {
      get { return valCase_ == ValOneofCase.PasswordVal ? (string) val_ : ""; }
      set {
        val_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        valCase_ = ValOneofCase.PasswordVal;
      }
    }

    /// <summary>Field number for the "uid_val" field.</summary>
    public const int UidValFieldNumber = 11;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong UidVal {
      get { return valCase_ == ValOneofCase.UidVal ? (ulong) val_ : 0UL; }
      set {
        val_ = value;
        valCase_ = ValOneofCase.UidVal;
      }
    }

    private object val_;
    /// <summary>Enum of possible cases for the "val" oneof.</summary>
    public enum ValOneofCase {
      None = 0,
      DefaultVal = 1,
      BytesVal = 2,
      IntVal = 3,
      BoolVal = 4,
      StrVal = 5,
      DoubleVal = 6,
      GeoVal = 7,
      DateVal = 8,
      DatetimeVal = 9,
      PasswordVal = 10,
      UidVal = 11,
    }
    private ValOneofCase valCase_ = ValOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValOneofCase ValCase {
      get { return valCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVal() {
      valCase_ = ValOneofCase.None;
      val_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Value);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Value other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefaultVal != other.DefaultVal) return false;
      if (BytesVal != other.BytesVal) return false;
      if (IntVal != other.IntVal) return false;
      if (BoolVal != other.BoolVal) return false;
      if (StrVal != other.StrVal) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(DoubleVal, other.DoubleVal)) return false;
      if (GeoVal != other.GeoVal) return false;
      if (DateVal != other.DateVal) return false;
      if (DatetimeVal != other.DatetimeVal) return false;
      if (PasswordVal != other.PasswordVal) return false;
      if (UidVal != other.UidVal) return false;
      if (ValCase != other.ValCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valCase_ == ValOneofCase.DefaultVal) hash ^= DefaultVal.GetHashCode();
      if (valCase_ == ValOneofCase.BytesVal) hash ^= BytesVal.GetHashCode();
      if (valCase_ == ValOneofCase.IntVal) hash ^= IntVal.GetHashCode();
      if (valCase_ == ValOneofCase.BoolVal) hash ^= BoolVal.GetHashCode();
      if (valCase_ == ValOneofCase.StrVal) hash ^= StrVal.GetHashCode();
      if (valCase_ == ValOneofCase.DoubleVal) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(DoubleVal);
      if (valCase_ == ValOneofCase.GeoVal) hash ^= GeoVal.GetHashCode();
      if (valCase_ == ValOneofCase.DateVal) hash ^= DateVal.GetHashCode();
      if (valCase_ == ValOneofCase.DatetimeVal) hash ^= DatetimeVal.GetHashCode();
      if (valCase_ == ValOneofCase.PasswordVal) hash ^= PasswordVal.GetHashCode();
      if (valCase_ == ValOneofCase.UidVal) hash ^= UidVal.GetHashCode();
      hash ^= (int) valCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valCase_ == ValOneofCase.DefaultVal) {
        output.WriteRawTag(10);
        output.WriteString(DefaultVal);
      }
      if (valCase_ == ValOneofCase.BytesVal) {
        output.WriteRawTag(18);
        output.WriteBytes(BytesVal);
      }
      if (valCase_ == ValOneofCase.IntVal) {
        output.WriteRawTag(24);
        output.WriteInt64(IntVal);
      }
      if (valCase_ == ValOneofCase.BoolVal) {
        output.WriteRawTag(32);
        output.WriteBool(BoolVal);
      }
      if (valCase_ == ValOneofCase.StrVal) {
        output.WriteRawTag(42);
        output.WriteString(StrVal);
      }
      if (valCase_ == ValOneofCase.DoubleVal) {
        output.WriteRawTag(49);
        output.WriteDouble(DoubleVal);
      }
      if (valCase_ == ValOneofCase.GeoVal) {
        output.WriteRawTag(58);
        output.WriteBytes(GeoVal);
      }
      if (valCase_ == ValOneofCase.DateVal) {
        output.WriteRawTag(66);
        output.WriteBytes(DateVal);
      }
      if (valCase_ == ValOneofCase.DatetimeVal) {
        output.WriteRawTag(74);
        output.WriteBytes(DatetimeVal);
      }
      if (valCase_ == ValOneofCase.PasswordVal) {
        output.WriteRawTag(82);
        output.WriteString(PasswordVal);
      }
      if (valCase_ == ValOneofCase.UidVal) {
        output.WriteRawTag(88);
        output.WriteUInt64(UidVal);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valCase_ == ValOneofCase.DefaultVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultVal);
      }
      if (valCase_ == ValOneofCase.BytesVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(BytesVal);
      }
      if (valCase_ == ValOneofCase.IntVal) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(IntVal);
      }
      if (valCase_ == ValOneofCase.BoolVal) {
        size += 1 + 1;
      }
      if (valCase_ == ValOneofCase.StrVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StrVal);
      }
      if (valCase_ == ValOneofCase.DoubleVal) {
        size += 1 + 8;
      }
      if (valCase_ == ValOneofCase.GeoVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(GeoVal);
      }
      if (valCase_ == ValOneofCase.DateVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DateVal);
      }
      if (valCase_ == ValOneofCase.DatetimeVal) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DatetimeVal);
      }
      if (valCase_ == ValOneofCase.PasswordVal) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PasswordVal);
      }
      if (valCase_ == ValOneofCase.UidVal) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UidVal);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Value other) {
      if (other == null) {
        return;
      }
      switch (other.ValCase) {
        case ValOneofCase.DefaultVal:
          DefaultVal = other.DefaultVal;
          break;
        case ValOneofCase.BytesVal:
          BytesVal = other.BytesVal;
          break;
        case ValOneofCase.IntVal:
          IntVal = other.IntVal;
          break;
        case ValOneofCase.BoolVal:
          BoolVal = other.BoolVal;
          break;
        case ValOneofCase.StrVal:
          StrVal = other.StrVal;
          break;
        case ValOneofCase.DoubleVal:
          DoubleVal = other.DoubleVal;
          break;
        case ValOneofCase.GeoVal:
          GeoVal = other.GeoVal;
          break;
        case ValOneofCase.DateVal:
          DateVal = other.DateVal;
          break;
        case ValOneofCase.DatetimeVal:
          DatetimeVal = other.DatetimeVal;
          break;
        case ValOneofCase.PasswordVal:
          PasswordVal = other.PasswordVal;
          break;
        case ValOneofCase.UidVal:
          UidVal = other.UidVal;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DefaultVal = input.ReadString();
            break;
          }
          case 18: {
            BytesVal = input.ReadBytes();
            break;
          }
          case 24: {
            IntVal = input.ReadInt64();
            break;
          }
          case 32: {
            BoolVal = input.ReadBool();
            break;
          }
          case 42: {
            StrVal = input.ReadString();
            break;
          }
          case 49: {
            DoubleVal = input.ReadDouble();
            break;
          }
          case 58: {
            GeoVal = input.ReadBytes();
            break;
          }
          case 66: {
            DateVal = input.ReadBytes();
            break;
          }
          case 74: {
            DatetimeVal = input.ReadBytes();
            break;
          }
          case 82: {
            PasswordVal = input.ReadString();
            break;
          }
          case 88: {
            UidVal = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Facet : pb::IMessage<Facet> {
    private static readonly pb::MessageParser<Facet> _parser = new pb::MessageParser<Facet>(() => new Facet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Facet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Facet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Facet(Facet other) : this() {
      key_ = other.key_;
      value_ = other.value_;
      valType_ = other.valType_;
      tokens_ = other.tokens_.Clone();
      alias_ = other.alias_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Facet Clone() {
      return new Facet(this);
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 1;
    private string key_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private pb::ByteString value_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Value {
      get { return value_; }
      set {
        value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "val_type" field.</summary>
    public const int ValTypeFieldNumber = 3;
    private TinyDgraphClient.Generated.Facet.Types.ValType valType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TinyDgraphClient.Generated.Facet.Types.ValType ValType {
      get { return valType_; }
      set {
        valType_ = value;
      }
    }

    /// <summary>Field number for the "tokens" field.</summary>
    public const int TokensFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tokens_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tokens_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// tokens of value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tokens {
      get { return tokens_; }
    }

    /// <summary>Field number for the "alias" field.</summary>
    public const int AliasFieldNumber = 5;
    private string alias_ = "";
    /// <summary>
    /// not stored, only used for query.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Alias {
      get { return alias_; }
      set {
        alias_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Facet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Facet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Key != other.Key) return false;
      if (Value != other.Value) return false;
      if (ValType != other.ValType) return false;
      if(!tokens_.Equals(other.tokens_)) return false;
      if (Alias != other.Alias) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      if (Value.Length != 0) hash ^= Value.GetHashCode();
      if (ValType != 0) hash ^= ValType.GetHashCode();
      hash ^= tokens_.GetHashCode();
      if (Alias.Length != 0) hash ^= Alias.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Key.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Key);
      }
      if (Value.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Value);
      }
      if (ValType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ValType);
      }
      tokens_.WriteTo(output, _repeated_tokens_codec);
      if (Alias.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Alias);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
      }
      if (Value.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Value);
      }
      if (ValType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ValType);
      }
      size += tokens_.CalculateSize(_repeated_tokens_codec);
      if (Alias.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Alias);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Facet other) {
      if (other == null) {
        return;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
      if (other.Value.Length != 0) {
        Value = other.Value;
      }
      if (other.ValType != 0) {
        ValType = other.ValType;
      }
      tokens_.Add(other.tokens_);
      if (other.Alias.Length != 0) {
        Alias = other.Alias;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Key = input.ReadString();
            break;
          }
          case 18: {
            Value = input.ReadBytes();
            break;
          }
          case 24: {
            ValType = (TinyDgraphClient.Generated.Facet.Types.ValType) input.ReadEnum();
            break;
          }
          case 34: {
            tokens_.AddEntriesFrom(input, _repeated_tokens_codec);
            break;
          }
          case 42: {
            Alias = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Facet message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ValType {
        [pbr::OriginalName("STRING")] String = 0,
        [pbr::OriginalName("INT")] Int = 1,
        [pbr::OriginalName("FLOAT")] Float = 2,
        [pbr::OriginalName("BOOL")] Bool = 3,
        [pbr::OriginalName("DATETIME")] Datetime = 4,
      }

    }
    #endregion

  }

  public sealed partial class SchemaNode : pb::IMessage<SchemaNode> {
    private static readonly pb::MessageParser<SchemaNode> _parser = new pb::MessageParser<SchemaNode>(() => new SchemaNode());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SchemaNode> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaNode() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaNode(SchemaNode other) : this() {
      predicate_ = other.predicate_;
      type_ = other.type_;
      index_ = other.index_;
      tokenizer_ = other.tokenizer_.Clone();
      reverse_ = other.reverse_;
      count_ = other.count_;
      list_ = other.list_;
      upsert_ = other.upsert_;
      lang_ = other.lang_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SchemaNode Clone() {
      return new SchemaNode(this);
    }

    /// <summary>Field number for the "predicate" field.</summary>
    public const int PredicateFieldNumber = 1;
    private string predicate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Predicate {
      get { return predicate_; }
      set {
        predicate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 3;
    private bool index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "tokenizer" field.</summary>
    public const int TokenizerFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_tokenizer_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> tokenizer_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Tokenizer {
      get { return tokenizer_; }
    }

    /// <summary>Field number for the "reverse" field.</summary>
    public const int ReverseFieldNumber = 5;
    private bool reverse_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Reverse {
      get { return reverse_; }
      set {
        reverse_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 6;
    private bool count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "list" field.</summary>
    public const int ListFieldNumber = 7;
    private bool list_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool List {
      get { return list_; }
      set {
        list_ = value;
      }
    }

    /// <summary>Field number for the "upsert" field.</summary>
    public const int UpsertFieldNumber = 8;
    private bool upsert_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Upsert {
      get { return upsert_; }
      set {
        upsert_ = value;
      }
    }

    /// <summary>Field number for the "lang" field.</summary>
    public const int LangFieldNumber = 9;
    private bool lang_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Lang {
      get { return lang_; }
      set {
        lang_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SchemaNode);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SchemaNode other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Predicate != other.Predicate) return false;
      if (Type != other.Type) return false;
      if (Index != other.Index) return false;
      if(!tokenizer_.Equals(other.tokenizer_)) return false;
      if (Reverse != other.Reverse) return false;
      if (Count != other.Count) return false;
      if (List != other.List) return false;
      if (Upsert != other.Upsert) return false;
      if (Lang != other.Lang) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Predicate.Length != 0) hash ^= Predicate.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Index != false) hash ^= Index.GetHashCode();
      hash ^= tokenizer_.GetHashCode();
      if (Reverse != false) hash ^= Reverse.GetHashCode();
      if (Count != false) hash ^= Count.GetHashCode();
      if (List != false) hash ^= List.GetHashCode();
      if (Upsert != false) hash ^= Upsert.GetHashCode();
      if (Lang != false) hash ^= Lang.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Predicate.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Predicate);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (Index != false) {
        output.WriteRawTag(24);
        output.WriteBool(Index);
      }
      tokenizer_.WriteTo(output, _repeated_tokenizer_codec);
      if (Reverse != false) {
        output.WriteRawTag(40);
        output.WriteBool(Reverse);
      }
      if (Count != false) {
        output.WriteRawTag(48);
        output.WriteBool(Count);
      }
      if (List != false) {
        output.WriteRawTag(56);
        output.WriteBool(List);
      }
      if (Upsert != false) {
        output.WriteRawTag(64);
        output.WriteBool(Upsert);
      }
      if (Lang != false) {
        output.WriteRawTag(72);
        output.WriteBool(Lang);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Predicate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Predicate);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Index != false) {
        size += 1 + 1;
      }
      size += tokenizer_.CalculateSize(_repeated_tokenizer_codec);
      if (Reverse != false) {
        size += 1 + 1;
      }
      if (Count != false) {
        size += 1 + 1;
      }
      if (List != false) {
        size += 1 + 1;
      }
      if (Upsert != false) {
        size += 1 + 1;
      }
      if (Lang != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SchemaNode other) {
      if (other == null) {
        return;
      }
      if (other.Predicate.Length != 0) {
        Predicate = other.Predicate;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Index != false) {
        Index = other.Index;
      }
      tokenizer_.Add(other.tokenizer_);
      if (other.Reverse != false) {
        Reverse = other.Reverse;
      }
      if (other.Count != false) {
        Count = other.Count;
      }
      if (other.List != false) {
        List = other.List;
      }
      if (other.Upsert != false) {
        Upsert = other.Upsert;
      }
      if (other.Lang != false) {
        Lang = other.Lang;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Predicate = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            Index = input.ReadBool();
            break;
          }
          case 34: {
            tokenizer_.AddEntriesFrom(input, _repeated_tokenizer_codec);
            break;
          }
          case 40: {
            Reverse = input.ReadBool();
            break;
          }
          case 48: {
            Count = input.ReadBool();
            break;
          }
          case 56: {
            List = input.ReadBool();
            break;
          }
          case 64: {
            Upsert = input.ReadBool();
            break;
          }
          case 72: {
            Lang = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LoginRequest : pb::IMessage<LoginRequest> {
    private static readonly pb::MessageParser<LoginRequest> _parser = new pb::MessageParser<LoginRequest>(() => new LoginRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest(LoginRequest other) : this() {
      userid_ = other.userid_;
      password_ = other.password_;
      refreshToken_ = other.refreshToken_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginRequest Clone() {
      return new LoginRequest(this);
    }

    /// <summary>Field number for the "userid" field.</summary>
    public const int UseridFieldNumber = 1;
    private string userid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Userid {
      get { return userid_; }
      set {
        userid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refresh_token" field.</summary>
    public const int RefreshTokenFieldNumber = 3;
    private string refreshToken_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefreshToken {
      get { return refreshToken_; }
      set {
        refreshToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Userid != other.Userid) return false;
      if (Password != other.Password) return false;
      if (RefreshToken != other.RefreshToken) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Userid.Length != 0) hash ^= Userid.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (RefreshToken.Length != 0) hash ^= RefreshToken.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Userid.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Userid);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RefreshToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RefreshToken);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Userid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Userid);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RefreshToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshToken);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginRequest other) {
      if (other == null) {
        return;
      }
      if (other.Userid.Length != 0) {
        Userid = other.Userid;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.RefreshToken.Length != 0) {
        RefreshToken = other.RefreshToken;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Userid = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            RefreshToken = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class Jwt : pb::IMessage<Jwt> {
    private static readonly pb::MessageParser<Jwt> _parser = new pb::MessageParser<Jwt>(() => new Jwt());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Jwt> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return TinyDgraphClient.Generated.ApiReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jwt() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jwt(Jwt other) : this() {
      accessJwt_ = other.accessJwt_;
      refreshJwt_ = other.refreshJwt_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Jwt Clone() {
      return new Jwt(this);
    }

    /// <summary>Field number for the "access_jwt" field.</summary>
    public const int AccessJwtFieldNumber = 1;
    private string accessJwt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AccessJwt {
      get { return accessJwt_; }
      set {
        accessJwt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "refresh_jwt" field.</summary>
    public const int RefreshJwtFieldNumber = 2;
    private string refreshJwt_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RefreshJwt {
      get { return refreshJwt_; }
      set {
        refreshJwt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Jwt);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Jwt other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AccessJwt != other.AccessJwt) return false;
      if (RefreshJwt != other.RefreshJwt) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AccessJwt.Length != 0) hash ^= AccessJwt.GetHashCode();
      if (RefreshJwt.Length != 0) hash ^= RefreshJwt.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AccessJwt.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AccessJwt);
      }
      if (RefreshJwt.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RefreshJwt);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AccessJwt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessJwt);
      }
      if (RefreshJwt.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RefreshJwt);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Jwt other) {
      if (other == null) {
        return;
      }
      if (other.AccessJwt.Length != 0) {
        AccessJwt = other.AccessJwt;
      }
      if (other.RefreshJwt.Length != 0) {
        RefreshJwt = other.RefreshJwt;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AccessJwt = input.ReadString();
            break;
          }
          case 18: {
            RefreshJwt = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
